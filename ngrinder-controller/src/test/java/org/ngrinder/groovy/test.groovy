package org.ngrinder.groovy

import HTTPClient.CookieModule
import HTTPClient.HTTPResponse
import HTTPClient.NVPair
import net.grinder.plugin.http.HTTPPluginControl
import net.grinder.plugin.http.HTTPRequest
import net.grinder.script.GTest
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.AfterProcess
import net.grinder.scriptengine.groovy.junit.annotation.AfterThread
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
import org.junit.After
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

import static net.grinder.script.Grinder.grinder
import static org.hamcrest.Matchers.is
import static org.junit.Assert.assertThat
import static net.grinder.util.GrinderUtils.*
import static org.junit.Assert.assertTrue

/**
 * A simple example using the HTTP plugin that shows the retrieval of a
 * single page via HTTP. 
 *
 * This script is automatically generated by ngrinder.
 *
 * @author Gisoo Gwon
 */
@RunWith(GrinderRunner)
class Login {
    public static GTest test
    public static HTTPRequest request
    public Object cookies = []
    public static Map<String, Object> samplingMap = new HashMap<>()

    @BeforeProcess
    public static void beforeProcess() {
        HTTPPluginControl.getConnectionDefaults().timeout = 6000
        test = new GTest(1, "login test")
        request = new HTTPRequest()
        test.record(request);
        println grinder.getProperties().get("grinder.consoleHost").toString()+":"+grinder.getProperties().get("grinder.consolePort").toString()
        println "before process -------------------------------------"
    }

    @BeforeThread
    public void beforeThread() {
        println "before thread -------------------------------------"
        grinder.statistics.delayReports = true;

        // reset to the all cookies
        def threadContext = HTTPPluginControl.getThreadHTTPClientContext()
        cookies = CookieModule.listAllCookies(threadContext)
        cookies.each {
            CookieModule.removeCookie(it, threadContext)
        }


//        assertTrue(false)
    }

    @Before
    public void before() {
        println "before before -------------------------------------"
        // set cookies for login state
        def threadContext = HTTPPluginControl.getThreadHTTPClientContext()
        cookies.each {
            CookieModule.addCookie(it, threadContext)
            grinder.logger.info("{}", it)
        }
    }

    @Test
    public void test() {
        HTTPResponse result = request.GET("http://www.baidu.com")
        println "----------------------------123------"
        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            assertThat(result.statusCode, is(200));
        }
        assertTrue(false)
    }

    @AfterThread
    public void afterThread(){
        println "----------------abc---------------------------"
    }

    @AfterProcess
    public static void afterProcess(){
        println "----------------qwe---------------------------"
    }
}
